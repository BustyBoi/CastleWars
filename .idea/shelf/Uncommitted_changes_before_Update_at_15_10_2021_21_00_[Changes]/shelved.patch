Index: src/main/java/CastleWars/game/Generator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package CastleWars.game;\r\n\r\nimport CastleWars.Main;\r\nimport CastleWars.logic.*;\r\nimport arc.func.Cons;\r\nimport arc.struct.Seq;\r\nimport arc.util.Timer;\r\nimport mindustry.Vars;\r\nimport mindustry.content.Blocks;\r\nimport mindustry.content.Items;\r\nimport mindustry.content.StatusEffects;\r\nimport mindustry.content.UnitTypes;\r\nimport mindustry.game.Gamemode;\r\nimport mindustry.game.Team;\r\nimport mindustry.game.Teams;\r\nimport mindustry.type.Item;\r\nimport mindustry.type.StatusEffect;\r\nimport mindustry.type.UnitType;\r\nimport mindustry.world.Block;\r\nimport mindustry.world.Tile;\r\nimport mindustry.world.Tiles;\r\nimport mindustry.world.blocks.storage.CoreBlock;\r\n\r\npublic class Generator implements Cons<Tiles> {\r\n\r\n    Tiles saved;\r\n    int width, height;\r\n    Seq<Tile> cores;\r\n\r\n    public Generator() {\r\n        cores = new Seq<>();\r\n\r\n        Vars.world.loadMap(Vars.maps.getNextMap(Gamemode.pvp, Vars.state.map), Main.rules.copy());\r\n        saved = Vars.world.tiles;\r\n        width = saved.width;\r\n        height = saved.height * 2 + (Room.ROOM_SIZE * 6);\r\n    }\r\n\r\n    public void run() {\r\n        Vars.world.loadGenerator(width, height, this);\r\n        for (Teams.TeamData teamData : Vars.state.teams.active) {\r\n            for (CoreBlock.CoreBuild core : teamData.cores) {\r\n                core.kill();\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void get(Tiles t) {\r\n        for (int x = 0; x < t.width; x++) {\r\n            for (int y = 0; y < t.height; y++) {\r\n                t.set(x, y, new Tile(x, y, Blocks.space, Blocks.air, Blocks.air));\r\n            }\r\n        }\r\n        for (int x = 0; x < t.width; x++) {\r\n            for (int y = 0; y < saved.height; y++) {\r\n                t.getn(x, y).setFloor(saved.getn(x, y).floor());\r\n                t.getn(x, y).setBlock(saved.getn(x, y).block());\r\n                int yy = y + saved.height + (Room.ROOM_SIZE * 6);\r\n                t.getn(x, yy).setFloor(saved.getn(x, y).floor());\r\n                if (!saved.getn(x, y).block().isAir()) {\r\n                    t.getn(x, yy).setBlock(saved.getn(x, y).block());\r\n                }\r\n            }\r\n        }\r\n        postGeneration(t);\r\n    }\r\n\r\n    public void postGeneration(Tiles t) {\r\n        for (int x = 0; x < t.width; x++) {\r\n            for (int y = 0; y < saved.height; y++) {\r\n                int yy = y + saved.height + (Room.ROOM_SIZE * 6);\r\n                // Core Build\r\n                if (saved.getn(x, y).floor().equals(Blocks.darkPanel1)) {\r\n                    final int cx = x, cy = y, cyy = yy;\r\n                    Timer.schedule(() -> {\r\n                        t.getn(cx, cy).setNet(Blocks.coreShard, Team.sharded, 0);\r\n                        t.getn(cx, cyy).setNet(Blocks.coreShard, Team.blue, 0);\r\n                    }, 1);\r\n\r\n                    cores.add(t.getn(x, y));\r\n                    cores.add(t.getn(x, yy));\r\n\r\n                    addCoreRoom(t.getn(x, y), yy);\r\n                }\r\n                // Turret Build\r\n                if (saved.getn(x, y).floor().equals(Blocks.darkPanel3)) {\r\n                    turretGen(t.getn(x, y), yy);\r\n                }\r\n                // Drill room\r\n                if (saved.getn(x, y).floor().equals(Blocks.metalFloorDamaged)) {\r\n                    addDrillRoom(t.getn(x, y), yy);\r\n                }\r\n                // Spawners place\r\n                if (saved.getn(x, y).floor().equals(Blocks.darkPanel2)) {\r\n                    UnitRoom.shardedSpawn = t.get(x, y);\r\n                    UnitRoom.blueSpawn = t.get(x, yy);\r\n                }\r\n            }\r\n        }\r\n        // UnitShop in centre\r\n        shopInit();\r\n\r\n        for (Room room : Room.rooms) {\r\n            room.spawn(t);\r\n        }\r\n    }\r\n\r\n    private void shopInit() {\r\n        int cx = 2, cy = saved.height + 2;\r\n        int Padding = Room.ROOM_SIZE + 2;\r\n        // Ground\r\n        addUnit(UnitTypes.dagger, cx, cy + 2, 100, 0);\r\n        addUnit(UnitTypes.mace, cx + Padding, cy + 2, 150, 1);\r\n        addUnit(UnitTypes.fortress, cx + Padding * 2, cy + 2, 500, 4);\r\n        addUnit(UnitTypes.scepter, cx + Padding * 3, cy + 2, 3000, 18);\r\n        addUnit(UnitTypes.reign, cx + Padding * 4, cy + 2, 7500, 50);\r\n        // Support \r\n        cx += 1;\r\n        addUnit(UnitTypes.nova, cx + Padding * 5, cy + 2, 100, 0);\r\n        addUnit(UnitTypes.pulsar, cx + Padding * 6, cy + 2, 180, 1);\r\n        addUnit(UnitTypes.quasar, cx + Padding * 7, cy + 2, 500, 4);\r\n        addUnit(UnitTypes.vela, cx + Padding * 8, cy + 2, 3500, 20);\r\n        addUnit(UnitTypes.corvus, cx + Padding * 9, cy + 2, 7500, 50);\r\n        // Naval Support\r\n        cx += 1;\r\n        addUnit(UnitTypes.retusa, cx + Padding * 10, cy + 2, 200, 1);\r\n        addUnit(UnitTypes.oxynoe, cx + Padding * 11, cy + 2, 550, 3);\r\n        addUnit(UnitTypes.cyerce, cx + Padding * 12, cy + 2, 1400, 9);\r\n        addUnit(UnitTypes.aegires, cx + Padding * 13, cy + 2, 4000, 25);\r\n        addUnit(UnitTypes.navanax, cx + Padding * 14, cy + 2, 9000, 70);\r\n        // Spiders\r\n        cx -= 2;\r\n        addUnit(UnitTypes.crawler, cx, cy + 2 + Padding * 2, 75, 0);\r\n        addUnit(UnitTypes.atrax, cx + Padding, cy + 2 + Padding * 2, 160, 1);\r\n        addUnit(UnitTypes.spiroct, cx + Padding * 2, cy + 2 + Padding * 2, 450, 4);\r\n        addUnit(UnitTypes.arkyid, cx + Padding * 3, cy + 2 + Padding * 2, 3500, 20);\r\n        addUnit(UnitTypes.toxopid, cx + Padding * 4, cy + 2 + Padding * 2, 9000, 70);\r\n        // Naval \r\n        cx += 1;\r\n        addUnit(UnitTypes.risso, cx + Padding * 5, cy + 2 + Padding * 2, 150, 1);\r\n        addUnit(UnitTypes.minke, cx + Padding * 6, cy + 2 + Padding * 2, 350, 2);\r\n        addUnit(UnitTypes.bryde, cx + Padding * 7, cy + 2 + Padding * 2, 1200, 8);\r\n        addUnit(UnitTypes.sei, cx + Padding * 8, cy + 2 + Padding * 2, 3500, 20);\r\n        addUnit(UnitTypes.omura, cx + Padding * 9, cy + 2 + Padding * 2, 9000, 70);\r\n        // Resources\r\n        cx += 1;\r\n        addResources(Items.copper, cx + Padding * 10, cy + 2 + Padding * 2, 100);\r\n        addResources(Items.silicon, cx + Padding * 10, cy + 2 + Padding * 2 + Room.ROOM_SIZE + 2, 150);\r\n\r\n        addResources(Items.titanium, cx + Padding * 11, cy + 2 + Padding * 2, 200);\r\n        addResources(Items.pyratite, cx + Padding * 11, cy + 2 + Padding * 2 + Room.ROOM_SIZE + 2, 200);\r\n\r\n        addResources(Items.plastanium, cx + Padding * 12, cy + 2 + Padding * 2, 300);\r\n        addResources(Items.blastCompound, cx + Padding * 12, cy + 2 + Padding * 2 + Room.ROOM_SIZE + 2, 250);\r\n\r\n        addResources(Items.phaseFabric, cx + Padding * 13, cy + 2 + Padding * 2, 400);\r\n        addEffectRoom(StatusEffects.overdrive, cx + Padding * 13, cy + 2 + Padding * 2 + Room.ROOM_SIZE + 2, 2000, \"Overdrive\\neffect\");\r\n\r\n        addResources(Items.surgeAlloy, cx + Padding * 14, cy + 2 + Padding * 2, 500);\r\n        addEffectRoom(StatusEffects.boss, cx + Padding * 14, cy + 2 + Padding * 2 + Room.ROOM_SIZE + 2, 3000, \"Boss\\neffect\");\r\n    }\r\n\r\n    private void turretGen(Tile tile, int yy) {\r\n        // ForeShadow\r\n        if (tile.nearby(1, 1).floor().equals(Blocks.darkPanel6) && tile.nearby(-1, -1).floor().equals(Blocks.darkPanel6) && tile.nearby(-1, 1).floor().equals(Blocks.darkPanel6) && tile.nearby(1, -1).floor().equals(Blocks.darkPanel6)) {\r\n            addTurret(Blocks.foreshadow, tile, yy, 10000, 5);\r\n        } // Spectre\r\n        else if (tile.nearby(1, 1).floor().equals(Blocks.darkPanel4) && tile.nearby(-1, -1).floor().equals(Blocks.darkPanel4) && tile.nearby(-1, 1).floor().equals(Blocks.darkPanel4) && tile.nearby(1, -1).floor().equals(Blocks.darkPanel4)) {\r\n            addTurret(Blocks.spectre, tile, yy, 5000, 5);\r\n        } // MeltDown \r\n        else if (tile.nearby(1, 1).floor().equals(Blocks.darkPanel6) && tile.nearby(-1, -1).floor().equals(Blocks.darkPanel6)) {\r\n            addTurret(Blocks.meltdown, tile, yy, 4000, 5);\r\n        } // Cyclone        \r\n        else if (tile.nearby(1, 1).floor().equals(Blocks.darkPanel4) && tile.nearby(-1, -1).floor().equals(Blocks.darkPanel4)) {\r\n            addTurret(Blocks.cyclone, tile, yy, 2500, 4);\r\n        } // Ripple\r\n        else if (tile.nearby(0, 1).floor().equals(Blocks.darkPanel4) && tile.nearby(0, -1).floor().equals(Blocks.darkPanel4)) {\r\n            addTurret(Blocks.ripple, tile, yy, 1250, 4);\r\n        } // Fuse\r\n        else if (tile.nearby(1, 0).floor().equals(Blocks.darkPanel4) && tile.nearby(-1, 0).floor().equals(Blocks.darkPanel4)) {\r\n            addTurret(Blocks.fuse, tile, yy, 1000, 4);\r\n        }// Segment\r\n        else if (tile.nearby(0, 1).floor().equals(Blocks.darkPanel4)) {\r\n            addTurret(Blocks.segment, tile, yy, 600, 3);\r\n        } // Lancer\r\n        else if (tile.nearby(-1, -1).floor().equals(Blocks.darkPanel4)) {\r\n            addTurret(Blocks.lancer, tile, yy, 400, 3);\r\n        }\r\n        else if (tile.nearby(-1, -1).floor().equals(Blocks.darkPanel6)) {\r\n            addTurret(Blocks.salvo, tile, yy, 350, 3);\r\n        }\r\n    }\r\n\r\n    private void addTurret(Block block, Tile tile, int yy, int cost, int size) {\r\n        Room.rooms.add(new TurretRoom(Team.sharded, block, tile.x - size / 2, tile.y - size / 2, cost, size));\r\n        Room.rooms.add(new TurretRoom(Team.blue, block, tile.x - size / 2, yy - size / 2, cost, size));\r\n    }\r\n\r\n    private void addUnit(UnitType type, int x, int y, int cost, int income) {\r\n        Room.rooms.add(new UnitRoom(type, x, y, cost, income, UnitRoom.Type.Attacker));\r\n        if (income > 0) income -= 1;\r\n        Room.rooms.add(new UnitRoom(type, x, y + Room.ROOM_SIZE + 2, cost, -income, UnitRoom.Type.Defender));\r\n    }\r\n\r\n    private void addCoreRoom(Tile tile, int yy) {\r\n        Room.rooms.add(new CoreRoom(Team.sharded, tile.x - 2, tile.y - 2));\r\n        Room.rooms.add(new CoreRoom(Team.blue, tile.x - 2, yy - 2));\r\n    }\r\n\r\n    private void addDrillRoom(Tile tile, int yy) {\r\n        Room.rooms.add(new DrillRoom(Team.sharded, tile.x - 2, tile.y - 2));\r\n        Room.rooms.add(new DrillRoom(Team.blue, tile.x - 2, yy - 2));\r\n    }\r\n\r\n    private void addResources(Item item, int x, int y, int cost) {\r\n        Room.rooms.add(new ResourceRoom(item, x, y, cost, 240));\r\n    }\r\n\r\n    private void addEffectRoom(StatusEffect effect, int x, int y, int cost, String name) {\r\n        Room.rooms.add(new EffectRoom(effect, x, y, cost, name));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/CastleWars/game/Generator.java b/src/main/java/CastleWars/game/Generator.java
--- a/src/main/java/CastleWars/game/Generator.java	
+++ b/src/main/java/CastleWars/game/Generator.java	
@@ -124,11 +124,11 @@
         addUnit(UnitTypes.corvus, cx + Padding * 9, cy + 2, 7500, 50);
         // Naval Support
         cx += 1;
-        addUnit(UnitTypes.retusa, cx + Padding * 10, cy + 2, 200, 1);
-        addUnit(UnitTypes.oxynoe, cx + Padding * 11, cy + 2, 550, 3);
-        addUnit(UnitTypes.cyerce, cx + Padding * 12, cy + 2, 1400, 9);
-        addUnit(UnitTypes.aegires, cx + Padding * 13, cy + 2, 4000, 25);
-        addUnit(UnitTypes.navanax, cx + Padding * 14, cy + 2, 9000, 70);
+        addUnit(UnitTypes.retusa, cx + Padding * 10, cy + 2, 250, 1);
+        addUnit(UnitTypes.oxynoe, cx + Padding * 11, cy + 2, 600, 3);
+        addUnit(UnitTypes.cyerce, cx + Padding * 12, cy + 2, 1500, 9);
+        addUnit(UnitTypes.aegires, cx + Padding * 13, cy + 2, 5000, 25);
+        addUnit(UnitTypes.navanax, cx + Padding * 14, cy + 2, 8500, 60);
         // Spiders
         cx -= 2;
         addUnit(UnitTypes.crawler, cx, cy + 2 + Padding * 2, 75, 0);
